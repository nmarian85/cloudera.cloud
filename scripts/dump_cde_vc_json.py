import sys
import json
import os
import argparse

my_parser = argparse.ArgumentParser(description="Install or delete CDE virtual clusters")

# Add the arguments
my_parser.add_argument(
    "--action", choices=["install", "delete"], help="Install or delete CDE cluster",
)
my_parser.add_argument("-e", "--env", help="Environment (e.g. lab)")
my_parser.add_argument("-c", "--cdp-env-name", help="CDP env name")
my_parser.add_argument("-m", "--cdecluster", help="CDE cluster name")

# if defined, only this VC will be installed/deleted, otherwise all VCs belonging
# to the CDE cluster will be
my_parser.add_argument("-v", "--cdevccluster", action='store_true', help="VC CDE cluster name")

args = my_parser.parse_args()

cdp_env_name = args.cdp_env_name
env = args.env
cluster_name = args.cdecluster

with open(f"{env}.json", "r") as read_file:
    envs = json.load(read_file)

if envs.get(cdp_env_name) is None:
    raise ValueError(f"Unable to find {cdp_env_name} in env.json")

with open("skel.json") as json_file:
    env_json_skel = json.load(json_file)

cdp_env_info = envs.get(cdp_env_name)
cde_cluster = cdp_env_info.get("cde_clusters").get(cluster_name)

if cde_cluster is None:
    raise ValueError(f"Unable to find {cluster_name} in env.json")

with open("skel.json") as json_file:
    cde_vc_json_skel = json.load(json_file)


# there is a bit of a challenge since the cluster id is dynamically generated by CDP and cannot
# be known beforehand
with open("services.json") as json_file:
    services = json.load(json_file)

for service in services:
    if service["name"] == cluster_name:
        cluster_id = service["clusterId"]

# we target only a specific vcs if the vc was specified in the CLI
if args.cdevccluster:
    vcs = {args.cdevccluster: cde_cluster["vcs"][args.cdevccluster]}
else:
    vcs = cde_cluster["vcs"]

for vc_name, vc_info in vcs:
    cde_vc_json = dict(cde_vc_json_skel)
    cde_vc_json["name"] = vc_name
    cde_vc_json["clusterId"] = cluster_id
    cde_vc_json["cpuRequests"] = vc_info["cpu_requests"]
    cde_vc_json["chartValueOverrides"] = vc_info["chart_value_overrides"]
    cde_vc_json["runtimeSpotComponent"] = vc_info["runtime_spot_component"]
    with open(f"{vc_name}_vc.json", "w", encoding="utf-8") as f:
        json.dump(cde_vc_json, f, ensure_ascii=False, indent=4)
