---
- hosts: localhost
  connection: local
  vars:
    work: "{{ lookup('env', 'WORK') | default('install', true) }}"
    ecb_env: "{{ lookup('env', 'ECB_ENV') }}"
    env_name: "{{ lookup('env', 'CDP_ENV_NAME') }}"
    cde_cluster_names: ["{{ env_name }}-cde01"]
    # cde_vc_names: ["{{ env_name }}-cde01"]
    cml_cluster_names: ["{{ env_name }}-cml01"]
  vars_files:
    - "cdp_envs/{{ ecb_env }}/{{ env_name }}/env.yml"
    - "cdp_envs/{{ ecb_env }}/{{ env_name }}/cdl.yml"
    - "cdp_envs/{{ ecb_env }}/{{ env_name }}/cde.yml"
    - "cdp_envs/{{ ecb_env }}/{{ env_name }}/cml.yml"
    - "cdp_envs/{{ ecb_env }}/tenant.yml"

  collections:
    - cloudera.cloud
  include_role:
    # - cred
    # - env
    # - cdl
    name: cde
  with_items:
    - cde_cluster_names
# # - name: CDE clusters to provision
# #   set_fact:
# #     cde_cluster_names: ["{{ env_name }}-cde01"]

# # - name: Enable CDE service
# #   cloudera.cloud.de:
# #     name: "{{ item }}"
# #     env: "{{ env_name }}"
# #     use_ssd: "{{ cde_clusters[item]['use_ssd'] }}"
# #     root_volume_size: "{{ cde_clusters[item]['root_vol_size'] }}"
# #     initial_spot_instances: "{{ cde_clusters[item]['initial_spot_instances'] }}"
# #     maximum_spot_instances: "{{ cde_clusters[item]['max_spot_instances'] }}"
# #     minimum_spot_instances: "{{ cde_clusters[item]['min_spot_instances'] }}"
# #     instance_type: "{{ cde_clusters[item]['instance_type'] }}"
# #     initial_instances: "{{ cde_clusters[item]['initial_instances'] }}"
# #     minimum_instances: "{{ cde_clusters[item]['min_instances'] }}"
# #     maximum_instances: "{{ cde_clusters[item]['max_instances'] }}"
# #     enable_workload_analytics: false
# #     enable_public_endpoint: false
# #     wait: yes
# #     tags: "{{ cde_clusters[item]['tags'] }}"
# #   with_items: "{{ cde_cluster_names }}"

# # - name: CML clusters to provision
# #   set_fact:
# #     cml_cluster_names: ["{{ env_name }}-cml01"]

# # - name: Install ML workspaces
# #   cloudera.cloud.ml:
# #     name: "{{ item }}"
# #     env: "{{ env_name }}"
# #     k8s_request:
# #       environmentName: "{{ env_name }}"
# #       instanceGroups:
# #         - name: default_settings
# #           autoscaling:
# #             maxInstances: "{{ cml_clusters[item]['ml_infra']['max_instances'] }}"
# #             minInstances: "{{ cml_clusters[item]['ml_infra']['min_instances'] }}"
# #           instanceType: "{{ cml_clusters[item]['ml_infra']['instance_type'] }}"
# #           instanceTier: "{{ cml_clusters[item]['ml_infra']['instance_tier'] }}"
# #           rootVolume:
# #             size: "{{ cml_clusters[item]['ml_infra']['root_volume'] }}"
# #         - name: cpu_settings
# #           autoscaling:
# #             maxInstances: "{{ cml_clusters[item]['ml_worker']['max_instances'] }}"
# #             minInstances: "{{ cml_clusters[item]['ml_worker']['min_instances'] }}"
# #           instanceType: "{{ cml_clusters[item]['ml_worker']['instance_type'] }}"
# #           instanceTier: "{{ cml_clusters[item]['ml_worker']['instance_tier'] }}"
# #           rootVolume:
# #             size: "{{ cml_clusters[item]['ml_worker']['root_volume'] }}"
# #     governance: "{{ cml_clusters[item]['enable_governance'] }}"
# #     wait: yes
# #     public_loadbalancer: false
# #     monitoring: true
# #     ip_addresses: []
# #     tags: "{{ cml_clusters[item]['tags'] }}"
# #   with_items:
# #     "{{ cml_cluster_names }}"

# # - name: gpu_settings
# #   autoscaling:
# #     maxInstances: 1
# #     minInstances: 0
# #   instanceCount: 0
# #   instanceTier: "ON_DEMAND"
# #   instanceType: "p2.8xlarge"
# #   rootVolume:
# #     size: 40
# #TODO: Add variable so that CDW part is not run unless the IaC pipeline has been already run and the EKS cluster provisioned
# # - name: Retrieve cluster id for CDW cluster
# #   cloudera.cloud.dw_cluster_info:
# #     env: "{{ env_name }}"
# #   register: cdw_cluster_info

# # - name: Get catalog id based on cluster id and catalog name
# #   cloudera.cloud.dw_database_catalog_info:
# #     name: "{{ cdw_vw_impala01['catalog_id'] }}"
# #     cluster_id: "{{ cdw_cluster_info['clusters'][0]['id'] }}"
# #   register: catalog_id_out

# # - name: Install Impala CDW virtual warehouse
# #   cloudera.cloud.dw_virtual_warehouse:
# #     cluster_id: "{{ cdw_cluster_info['clusters'][0]['id'] }}"
# #     name: "{{ cdw_vw_impala01['name'] }}"
# #     type: "{{ cdw_vw_impala01['vw_type'] }}"
# #     template: "{{ cdw_vw_impala01['template'] }}"
# #     autoscaling_min_nodes: "{{ cdw_vw_impala01['min_nodes'] }}"
# #     autoscaling_max_nodes: "{{ cdw_vw_impala01['max_nodes'] }}"
# #     catalog_id: "{{ catalog_id_out['database_catalogs'][0]['id'] }}"
# #     tags: "{{ cdw_vw_impala01['tags'] }}"
# #     enable_sso: true

# # - name: Install Hive CDW virtual warehouse
# #   cloudera.cloud.dw_virtual_warehouse:
# #     cluster_id: "{{ cdw_cluster_info['clusters'][0]['id'] }}"
# #     name: "{{ cdw_vw_hive01['name'] }}"
# #     type: "{{ cdw_vw_hive01['vw_type'] }}"
# #     template: "{{ cdw_vw_hive01['template'] }}"
# #     autoscaling_min_nodes: "{{ cdw_vw_hive01['min_nodes'] }}"
# #     autoscaling_max_nodes: "{{ cdw_vw_hive01['max_nodes'] }}"
# #     catalog_id: "{{ catalog_id_out['database_catalogs'][0]['id'] }}"
# #     tags: "{{ cdw_vw_hive01['tags'] }}"
# #     enable_sso: true
